{"ast":null,"code":"var _jsxFileName = \"/home/pantelisg/Documents/pairsOfSquares/src/Board/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useInterval } from '../Lib/utils';\nimport { popupStar } from '../Lib/popupStar';\nimport './Board.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 12;\nconst Board = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [reveals, setReveals] = useState(1);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [currentCell, setCurrentCell] = useState([-1, -1]);\n  const [openCells, setOpenCells] = useState(new Set([]));\n  const [displayPlusScore, setDisplayPlusScore] = useState(0);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setDisplayPlusScore(0);\n    }, 4000);\n    window.addEventListener('onClick', e => {\n      handleClick(e);\n    });\n    return () => clearTimeout(timeout);\n  }, []);\n  useInterval(() => {\n    openCell();\n  }, 150);\n  const handleClick = e => {};\n  const openCell = () => {};\n  const revealCell = (event, cellValue) => {\n    if (currentCell[1] === cellValue[1]) {\n      openCells.add(currentCell);\n      openCells.add(cellValue);\n      setOpenCells(openCells);\n      setScore(score + reveals * 10);\n      setReveals(reveals + 1);\n      setCurrentCell([-1, -1]);\n      setDisplayPlusScore(1);\n    } else {\n      if (currentCell[0] !== -1) {\n        setReveals(1);\n      }\n      setCurrentCell(cellValue);\n      setDisplayPlusScore(0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cellValue, cellIdx) => {\n          const className = getCellClassName(cellValue, currentCell, openCells);\n          const displayC = openCells.has(cellValue) || currentCell === cellValue ? cellValue[1] : '.';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: className,\n            onClick: event => revealCell(event, cellValue),\n            children: [displayC, displayPlusScore === 0 ? 'D' : 'P']\n          }, cellIdx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 36\n          }, this);\n        })\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n//Auxiliary consts\n_s(Board, \"ihABO5Qf+HJuRZeu4mmYafQ5u0U=\", false, function () {\n  return [useInterval];\n});\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push([counter++, row]);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nconst getCellClassName = (cellValue, currentCell, openCells) => {\n  let className = 'cell cell-red';\n  if (currentCell == cellValue) className = 'cell-revealed cell-green';\n  if (openCells.has(cellValue)) className = 'cell-revealed cell-purple';\n  return className;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","useInterval","popupStar","BOARD_SIZE","Board","score","setScore","reveals","setReveals","board","setBoard","createBoard","currentCell","setCurrentCell","openCells","setOpenCells","Set","displayPlusScore","setDisplayPlusScore","timeout","setTimeout","window","addEventListener","e","handleClick","clearTimeout","openCell","revealCell","event","cellValue","add","map","row","rowIdx","cellIdx","className","getCellClassName","displayC","has","counter","currentRow","col","push"],"sources":["/home/pantelisg/Documents/pairsOfSquares/src/Board/Board.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useInterval } from '../Lib/utils';\nimport { popupStar } from '../Lib/popupStar';\nimport './Board.css';\nconst BOARD_SIZE = 12;\n\nconst Board = () => {\n    const [score, setScore] = useState(0);\n    const [reveals, setReveals] = useState(1);\n    const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n    const [currentCell, setCurrentCell] = useState([-1, -1]);\n    const [openCells, setOpenCells] = useState(new Set([]));\n    const [displayPlusScore, setDisplayPlusScore] = useState(0);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setDisplayPlusScore(0);\n        }, 4000);\n        window.addEventListener('onClick', e => {\n            handleClick(e);\n        });\n        return () => clearTimeout(timeout);\n    }, []);\n\n    useInterval(() => {\n        openCell();\n    }, 150);\n\n\n    const handleClick = e => {\n    };\n    const openCell = () => {\n    }\n\n\n    const revealCell = (event, cellValue) => {\n\n        if (currentCell[1] === cellValue[1]) {\n            openCells.add(currentCell);\n            openCells.add(cellValue);\n            setOpenCells(openCells);\n            setScore(score + reveals * 10);\n            setReveals(reveals + 1);\n            setCurrentCell([-1, -1]);\n            setDisplayPlusScore(1);\n        } else {\n            if (currentCell[0] !== -1) {\n                setReveals(1);\n            }\n            setCurrentCell(cellValue);\n            setDisplayPlusScore(0);\n        }\n    }\n\n    return (\n        <>\n            <h1>Score: {score}</h1>\n            <div className=\"board\">\n                {board.map((row, rowIdx) => (\n                    <div key={rowIdx} className=\"row\">\n                        {row.map((cellValue, cellIdx) => {\n                            const className = getCellClassName(\n                                cellValue,\n                                currentCell,\n                                openCells\n                            );\n                            const displayC = openCells.has(cellValue) || currentCell === cellValue ? cellValue[1] : '.';\n                            return <div key={cellIdx} className={className} onClick={event => revealCell(event, cellValue)}>\n                                {displayC}{displayPlusScore === 0 ? 'D' : 'P'}</div>;\n                        })}\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\n//Auxiliary consts\nconst createBoard = BOARD_SIZE => {\n    let counter = 1;\n    const board = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n        const currentRow = [];\n        for (let col = 0; col < BOARD_SIZE; col++) {\n            currentRow.push([counter++, row]);\n        }\n        board.push(currentRow);\n    }\n    return board;\n};\n\nconst getCellClassName = (\n    cellValue,\n    currentCell,\n    openCells\n) => {\n    let className = 'cell cell-red';\n\n    if (currentCell == cellValue) className = 'cell-revealed cell-green';\n    if (openCells.has(cellValue)) className = 'cell-revealed cell-purple';\n    return className;\n};\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module"}