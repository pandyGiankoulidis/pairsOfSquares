{"ast":null,"code":"var _jsxFileName = \"/home/pantelisg/Documents/pairsOfSquares/src/Board/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useInterval } from '../Lib/utils';\nimport './Board.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 12;\nconst Board = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [currentCell, setCurrentCell] = useState(0);\n  const [openCells, setOpenCells] = useState(new Set([]));\n  useEffect(() => {\n    window.addEventListener('onClick', e => {\n      handleClick(e);\n    });\n  }, []);\n  useInterval(() => {\n    openCell();\n  }, 150);\n  const handleClick = e => {};\n  const openCell = () => {};\n  const revealCell = (event, keyRow, keyCell, revealedValue) => {\n    if (currentCell == revealedValue) {\n      openCells.add(currentCell);\n      openCells.add(keyRow * BOARD_SIZE + keyCell + 1);\n      setOpenCells(openCells);\n      setCurrentCell(-1);\n    } else {\n      setCurrentCell(keyRow * BOARD_SIZE + keyCell + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cellValue, cellIdx) => {\n          const className = getCellClassName(cellValue[0], currentCell, openCells);\n          const displayC = openCells.has(cellValue[0]) || currentCell == cellValue[0] ? cellValue[1] : '.';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: className,\n            onClick: event => revealCell(event, rowIdx, cellIdx, cellValue[1]),\n            children: displayC\n          }, cellIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 36\n          }, this);\n        })\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n//Auxiliary consts\n_s(Board, \"F/ezMiEsiryjmY7KXCX/PnY266A=\", false, function () {\n  return [useInterval];\n});\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push([counter++, 9]);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nconst getCellClassName = (cellValue, currentCell, openCells) => {\n  let className = 'cell cell-red';\n  if (currentCell == cellValue) className = 'cell-revealed cell-green';\n  if (openCells.has(cellValue)) className = 'cell-revealed cell-purple';\n  return className;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","useInterval","BOARD_SIZE","Board","score","setScore","board","setBoard","createBoard","currentCell","setCurrentCell","openCells","setOpenCells","Set","window","addEventListener","e","handleClick","openCell","revealCell","event","keyRow","keyCell","revealedValue","add","map","row","rowIdx","cellValue","cellIdx","className","getCellClassName","displayC","has","counter","currentRow","col","push"],"sources":["/home/pantelisg/Documents/pairsOfSquares/src/Board/Board.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useInterval } from '../Lib/utils';\n\nimport './Board.css';\nconst BOARD_SIZE = 12;\n\nconst Board = () => {\n    const [score, setScore] = useState(0);\n    const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n    const [currentCell, setCurrentCell] = useState(0);\n    const [openCells, setOpenCells] = useState(new Set([]));\n\n    useEffect(() => {\n        window.addEventListener('onClick', e => {\n            handleClick(e);\n        });\n    }, []);\n\n    useInterval(() => {\n        openCell();\n    }, 150);\n\n\n    const handleClick = e => {\n    };\n    const openCell = () => {\n    }\n\n\n    const revealCell = (event, keyRow, keyCell, revealedValue) => {\n\n        if (currentCell == revealedValue) {\n            openCells.add(currentCell);\n            openCells.add(keyRow * BOARD_SIZE + keyCell + 1);\n            setOpenCells(openCells);\n            setCurrentCell(-1);\n        } else {\n            setCurrentCell(keyRow * BOARD_SIZE + keyCell + 1);\n        }\n    }\n\n    return (\n        <>\n            <h1>Score: {score}</h1>\n            <div className=\"board\">\n                {board.map((row, rowIdx) => (\n                    <div key={rowIdx} className=\"row\">\n                        {row.map((cellValue, cellIdx) => {\n                            const className = getCellClassName(\n                                cellValue[0],\n                                currentCell,\n                                openCells\n                            );\n                            const displayC = openCells.has(cellValue[0]) || currentCell == cellValue[0] ? cellValue[1] : '.';\n                            return <div key={cellIdx} className={className} onClick={event => revealCell(event, rowIdx, cellIdx, cellValue[1])}>{displayC}</div>;\n                        })}\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\n//Auxiliary consts\nconst createBoard = BOARD_SIZE => {\n    let counter = 1;\n    const board = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n        const currentRow = [];\n        for (let col = 0; col < BOARD_SIZE; col++) {\n            currentRow.push([counter++, 9]);\n        }\n        board.push(currentRow);\n    }\n    return board;\n};\n\nconst getCellClassName = (\n    cellValue,\n    currentCell,\n    openCells\n) => {\n    let className = 'cell cell-red';\n\n    if (currentCell == cellValue) className = 'cell-revealed cell-green';\n    if (openCells.has(cellValue)) className = 'cell-revealed cell-purple';\n    return className;\n};\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module"}