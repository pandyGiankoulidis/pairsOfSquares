[{"/home/pantelisg/Documents/pairsOfSquares/src/index.js":"1","/home/pantelisg/Documents/pairsOfSquares/src/App.js":"2","/home/pantelisg/Documents/pairsOfSquares/src/Board/Board.jsx":"3","/home/pantelisg/Documents/pairsOfSquares/src/Lib/utils.js":"4","/home/pantelisg/Documents/pairsOfSquares/src/Lib/popupStar.js":"5"},{"size":228,"mtime":1672222167451,"results":"6","hashOfConfig":"7"},{"size":165,"mtime":1672602181596,"results":"8","hashOfConfig":"7"},{"size":6877,"mtime":1672911189261,"results":"9","hashOfConfig":"7"},{"size":869,"mtime":1672229379271,"results":"10","hashOfConfig":"7"},{"size":203,"mtime":1672319367874,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1sbm71",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/pantelisg/Documents/pairsOfSquares/src/index.js",[],["25","26"],"/home/pantelisg/Documents/pairsOfSquares/src/App.js",[],"/home/pantelisg/Documents/pairsOfSquares/src/Board/Board.jsx",["27","28","29","30","31","32"],"import React, { useEffect, useState } from 'react';\nimport { useInterval } from '../Lib/utils';\nimport sound from '../interface-124464.mp3';\nimport errorSound from '../error-1-126514.mp3';\nimport { VolumeUp, VolumeMute, CaretLeftFill, Watch, PlayCircle, PauseCircle, Speedometer2, Sc } from 'react-bootstrap-icons';\nimport Button from \"react-bootstrap/Button\";\nimport './Board.css';\n\nconst BOARD_SIZE = 10;\n\nconst Board = () => {\n    const [score, setScore] = useState(0);\n    const [reveals, setReveals] = useState(1);\n    const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n    const [currentCell, setCurrentCell] = useState([-1, -1]);\n    const [openCells, setOpenCells] = useState(new Set([]));\n    const [displayPlusScore, setDisplayPlusScore] = useState(-1);\n    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n    const [timer, setTimer] = useState(0);\n    const [timerActive, setTimerActive] = useState(false);\n\n    const [highScore, setHighScore] = useState(0);\n    const [hsTime, setHsTime] = useState(0);\n    const [paused, setPaused] = useState(true);\n    const [useSoundEffect, setUseSoundEffect] = useState(true);\n\n    const timeout = setTimeout(() => {\n        setDisplayPlusScore(-1);\n    }, 5000);\n\n\n    useEffect(() => {\n        window.addEventListener('onClick', e => {\n            handleClick(e);\n        });\n        return () => clearTimeout(timeout);\n    }, []);\n\n    useInterval(() => {\n        openCell();\n    }, 150);\n\n    useEffect(() => {\n        let interval = null;\n        if (timerActive) {\n            interval = setInterval(() => {\n                setTimer(timer => timer + 1);\n            }, 1000);\n        } else if (!timerActive && timer !== 0) {\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [timerActive, timer]);\n\n\n    const handleClick = e => {\n    };\n    const openCell = () => {\n    }\n    const applySoundEffects = event => {\n        if (useSoundEffect) {\n            setUseSoundEffect(false);\n        } else {\n            setUseSoundEffect(true);\n        }\n    };\n\n    const revealCell = (event, cellValue) => {\n\n        if (paused) {\n            return;\n        }\n        setMousePosition({ x: event.clientX, y: event.clientY });\n        if (openCells.has(cellValue)) {\n            return;\n        }\n        if (currentCell[1] === cellValue[1] && currentCell[0] !== cellValue[0]) {\n            playCorrect(useSoundEffect);\n            openCells.add(currentCell);\n            openCells.add(cellValue);\n            setOpenCells(openCells);\n            setScore(score + reveals * 10);\n            setReveals(reveals + 1);\n            setCurrentCell([-1, -1]);\n            setDisplayPlusScore(currentCell[0]);\n        } else {\n            if (currentCell[0] !== -1) {\n                setReveals(1);\n                playError(useSoundEffect);\n                setScore(score - 1);\n            }\n            setCurrentCell(cellValue);\n            setDisplayPlusScore(-1);\n        }\n\n        //All cells have revealed\n        if (openCells.size === BOARD_SIZE * BOARD_SIZE) {\n            if ((score + reveals * 10) > highScore) {\n                setHighScore(score + reveals * 10);\n                setHsTime(timer);\n            }\n            setPaused(true);\n            setTimerActive(false);\n        }\n\n    }\n\n    const pauseGame = () => {\n        setPaused(true);\n        setTimerActive(false);\n    }\n\n    const unpauseGame = () => {\n        setPaused(false);\n        setTimerActive(true);\n    }\n\n    const reset = () => {\n        setPaused(true);\n        setTimer(0);\n        setTimerActive(false);\n        setScore(0);\n        setReveals(0);\n        setCurrentCell([-1, -1]);\n        setOpenCells(new Set([]));\n\n    }\n\n    return (\n        <>\n            <h5><Speedometer2 color=\"royalblue\"></Speedometer2> {highScore} pts. in {hsTime} sec.</h5>\n            <h3> {score} pts. <Watch color=\"royalblue\">:</Watch> {timer} sec.</h3>\n            <h3><button class=\"customButton\" onClick={paused ? unpauseGame : pauseGame}>{paused ? <PlayCircle class=\"customPlayPause\" color=\"red\"></PlayCircle> : <PauseCircle class=\"customPlayPause\" color=\"red\"></PauseCircle>}</button>\n                <button class=\"customButton\" onClick={reset}><CaretLeftFill class=\"customPlayPause\" color=\"red\"></CaretLeftFill></button>\n                <button class=\"customButton\" onClick={applySoundEffects}>{useSoundEffect ? <VolumeUp class=\"customPlayPause\" color=\"royalblue\"></VolumeUp> :\n                    <VolumeMute class=\"customPlayPause\" color=\"royalblue\"></VolumeMute>}</button></h3>\n            <div className=\"board\">\n                {board.map((row, rowIdx) => (\n                    <div key={rowIdx} className=\"row\">\n                        {row.map((cellValue, cellIdx) => {\n                            const className = getCellClassName(\n                                cellValue,\n                                currentCell,\n                                openCells\n                            );\n                            const displayC = openCells.has(cellValue) || currentCell === cellValue ? cellValue[1] : '.';\n                            return <div key={cellIdx} className={className} onClick={event => revealCell(event, cellValue)}>\n                                {displayC}\n                                <div style={{ position: 'absolute', top: mousePosition.y - 10, left: mousePosition.x, color: '#ffd700', fontSize: 30, fontWeight: 900 }}>{displayPlusScore === cellValue[0] ? '+' + (reveals - 1) * 10 : ' '}</div>\n                            </div>\n                        })}\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\n//Auxiliary consts\nconst createBoard = BOARD_SIZE => {\n    let counter = 1;\n    var occurs = [];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n        occurs.push(0);\n    }\n\n    const board = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n        const currentRow = [];\n        for (let col = 0; col < BOARD_SIZE; col++) {\n            let v = Math.floor(Math.random() * (BOARD_SIZE)) + 1;\n            while (occurs[v - 1] == BOARD_SIZE) {\n                v = Math.floor(Math.random() * (BOARD_SIZE)) + 1;\n            }\n            occurs[v - 1] = occurs[v - 1] + 1;\n            currentRow.push([counter++, v]);\n        }\n        board.push(currentRow);\n    }\n    return board;\n};\n\nconst getCellClassName = (\n    cellValue,\n    currentCell,\n    openCells\n) => {\n    let className = 'cell cell-red';\n\n    if (currentCell == cellValue) className = 'cell-revealed cell-green';\n    if (openCells.has(cellValue)) className = 'cell-revealed cell-purple';\n    return className;\n};\n\nfunction playCorrect(toplay) {\n    if (toplay) {\n        new Audio(sound).play();\n    }\n}\n\nfunction playError(toplay) {\n    if (toplay) {\n        new Audio(errorSound).play();\n    }\n}\n\nexport default Board;","/home/pantelisg/Documents/pairsOfSquares/src/Lib/utils.js",[],"/home/pantelisg/Documents/pairsOfSquares/src/Lib/popupStar.js",[],["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":5,"column":93,"nodeType":"41","messageId":"42","endLine":5,"endColumn":95},{"ruleId":"39","severity":1,"message":"43","line":6,"column":8,"nodeType":"41","messageId":"42","endLine":6,"endColumn":14},{"ruleId":"39","severity":1,"message":"44","line":14,"column":19,"nodeType":"41","messageId":"42","endLine":14,"endColumn":27},{"ruleId":"45","severity":1,"message":"46","line":38,"column":8,"nodeType":"47","endLine":38,"endColumn":10,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":173,"column":34,"nodeType":"51","messageId":"52","endLine":173,"endColumn":36},{"ruleId":"49","severity":1,"message":"50","line":191,"column":21,"nodeType":"51","messageId":"52","endLine":191,"endColumn":23},{"ruleId":"35","replacedBy":"53"},{"ruleId":"37","replacedBy":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Sc' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'setBoard' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'timeout'. Either include it or remove the dependency array.","ArrayExpression",["57"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["55"],["56"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [timeout]",{"range":"60","text":"61"},[1410,1412],"[timeout]"]