{"version":3,"sources":["interface-124464.mp3","error-1-126514.mp3","Board/Board.jsx","Lib/utils.js","App.js","index.js"],"names":["createBoard","BOARD_SIZE","counter","occurs","i","push","board","row","currentRow","col","v","Math","floor","random","getCellClassName","cellValue","currentCell","openCells","className","has","Board","useState","score","setScore","reveals","setReveals","setCurrentCell","Set","setOpenCells","displayPlusScore","setDisplayPlusScore","x","y","mousePosition","setMousePosition","timer","setTimer","timerActive","setTimerActive","highScore","setHighScore","hsTime","setHsTime","paused","setPaused","useSoundEffect","setUseSoundEffect","timeout","setTimeout","useEffect","window","addEventListener","e","handleClick","clearTimeout","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","openCell","interval","revealCell","event","clientX","clientY","Audio","sound","play","add","toplay","errorSound","playError","size","color","class","onClick","map","rowIdx","cellIdx","displayC","style","position","top","left","fontSize","fontWeight","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.054a6339.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/interface-124464.b6ba2965.mp3\";","export default __webpack_public_path__ + \"static/media/error-1-126514.68bacdfd.mp3\";","import React, { useEffect, useState } from 'react';\nimport { useInterval } from '../Lib/utils';\nimport sound from '../interface-124464.mp3';\nimport errorSound from '../error-1-126514.mp3';\nimport { VolumeUp, VolumeMute, CaretLeftFill, Watch, PlayCircle, PauseCircle, Speedometer2, Sc } from 'react-bootstrap-icons';\nimport Button from \"react-bootstrap/Button\";\nimport './Board.css';\n\nconst BOARD_SIZE = 10;\n\nconst Board = () => {\n    const [score, setScore] = useState(0);\n    const [reveals, setReveals] = useState(1);\n    const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n    const [currentCell, setCurrentCell] = useState([-1, -1]);\n    const [openCells, setOpenCells] = useState(new Set([]));\n    const [displayPlusScore, setDisplayPlusScore] = useState(-1);\n    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n    const [timer, setTimer] = useState(0);\n    const [timerActive, setTimerActive] = useState(false);\n\n    const [highScore, setHighScore] = useState(0);\n    const [hsTime, setHsTime] = useState(0);\n    const [paused, setPaused] = useState(true);\n    const [useSoundEffect, setUseSoundEffect] = useState(true);\n\n    const timeout = setTimeout(() => {\n        setDisplayPlusScore(-1);\n    }, 5000);\n\n\n    useEffect(() => {\n        window.addEventListener('onClick', e => {\n            handleClick(e);\n        });\n        return () => clearTimeout(timeout);\n    }, []);\n\n    useInterval(() => {\n        openCell();\n    }, 150);\n\n    useEffect(() => {\n        let interval = null;\n        if (timerActive) {\n            interval = setInterval(() => {\n                setTimer(timer => timer + 1);\n            }, 1000);\n        } else if (!timerActive && timer !== 0) {\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [timerActive, timer]);\n\n\n    const handleClick = e => {\n    };\n    const openCell = () => {\n    }\n    const applySoundEffects = event => {\n        if (useSoundEffect) {\n            setUseSoundEffect(false);\n        } else {\n            setUseSoundEffect(true);\n        }\n    };\n\n    const revealCell = (event, cellValue) => {\n\n        if (paused) {\n            return;\n        }\n        setMousePosition({ x: event.clientX, y: event.clientY });\n        if (openCells.has(cellValue)) {\n            return;\n        }\n        if (currentCell[1] === cellValue[1] && currentCell[0] !== cellValue[0]) {\n            playCorrect(useSoundEffect);\n            openCells.add(currentCell);\n            openCells.add(cellValue);\n            setOpenCells(openCells);\n            setScore(score + reveals * 10);\n            setReveals(reveals + 1);\n            setCurrentCell([-1, -1]);\n            setDisplayPlusScore(currentCell[0]);\n        } else {\n            if (currentCell[0] !== -1) {\n                setReveals(1);\n                playError(useSoundEffect);\n                setScore(score - 1);\n            }\n            setCurrentCell(cellValue);\n            setDisplayPlusScore(-1);\n        }\n\n        //All cells have revealed\n        if (openCells.size === BOARD_SIZE * BOARD_SIZE) {\n            if ((score + reveals * 10) > highScore) {\n                setHighScore(score + reveals * 10);\n                setHsTime(timer);\n            }\n            setPaused(true);\n            setTimerActive(false);\n        }\n\n    }\n\n    const pauseGame = () => {\n        setPaused(true);\n        setTimerActive(false);\n    }\n\n    const unpauseGame = () => {\n        setPaused(false);\n        setTimerActive(true);\n    }\n\n    const reset = () => {\n        setPaused(true);\n        setTimer(0);\n        setTimerActive(false);\n        setScore(0);\n        setReveals(0);\n        setCurrentCell([-1, -1]);\n        setOpenCells(new Set([]));\n\n    }\n\n    return (\n        <>\n            <h5><Speedometer2 color=\"royalblue\"></Speedometer2> {highScore} pts. in {hsTime} sec.</h5>\n            <h3> {score} pts. <Watch color=\"royalblue\">:</Watch> {timer} sec.</h3>\n            <h3><button class=\"customButton\" onClick={paused ? unpauseGame : pauseGame}>{paused ? <PlayCircle class=\"customPlayPause\" color=\"red\"></PlayCircle> : <PauseCircle class=\"customPlayPause\" color=\"red\"></PauseCircle>}</button>\n                <button class=\"customButton\" onClick={reset}><CaretLeftFill class=\"customPlayPause\" color=\"red\"></CaretLeftFill></button>\n                <button class=\"customButton\" onClick={applySoundEffects}>{useSoundEffect ? <VolumeUp class=\"customPlayPause\" color=\"royalblue\"></VolumeUp> :\n                    <VolumeMute class=\"customPlayPause\" color=\"royalblue\"></VolumeMute>}</button></h3>\n            <div className=\"board\">\n                {board.map((row, rowIdx) => (\n                    <div key={rowIdx} className=\"row\">\n                        {row.map((cellValue, cellIdx) => {\n                            const className = getCellClassName(\n                                cellValue,\n                                currentCell,\n                                openCells\n                            );\n                            const displayC = openCells.has(cellValue) || currentCell === cellValue ? cellValue[1] : '.';\n                            return <div key={cellIdx} className={className} onClick={event => revealCell(event, cellValue)}>\n                                {displayC}\n                                <div style={{ position: 'absolute', top: mousePosition.y - 10, left: mousePosition.x, color: '#ffd700', fontSize: 30, fontWeight: 900 }}>{displayPlusScore === cellValue[0] ? '+' + (reveals - 1) * 10 : ' '}</div>\n                            </div>\n                        })}\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\n//Auxiliary consts\nconst createBoard = BOARD_SIZE => {\n    let counter = 1;\n    var occurs = [];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n        occurs.push(0);\n    }\n\n    const board = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n        const currentRow = [];\n        for (let col = 0; col < BOARD_SIZE; col++) {\n            let v = Math.floor(Math.random() * (BOARD_SIZE)) + 1;\n            while (occurs[v - 1] == BOARD_SIZE) {\n                v = Math.floor(Math.random() * (BOARD_SIZE)) + 1;\n            }\n            occurs[v - 1] = occurs[v - 1] + 1;\n            currentRow.push([counter++, v]);\n        }\n        board.push(currentRow);\n    }\n    return board;\n};\n\nconst getCellClassName = (\n    cellValue,\n    currentCell,\n    openCells\n) => {\n    let className = 'cell cell-red';\n\n    if (currentCell == cellValue) className = 'cell-revealed cell-green';\n    if (openCells.has(cellValue)) className = 'cell-revealed cell-purple';\n    return className;\n};\n\nfunction playCorrect(toplay) {\n    if (toplay) {\n        new Audio(sound).play();\n    }\n}\n\nfunction playError(toplay) {\n    if (toplay) {\n        new Audio(errorSound).play();\n    }\n}\n\nexport default Board;","import { useEffect, useRef } from 'react';\n\n// Copied from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import Board from './Board/Board.jsx';\n\nimport './App.css';\n\nconst App = () => (\n    <div className=\"App\">\n        <Board></Board>\n    </div>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}